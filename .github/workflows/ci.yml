name: Reusable CI workflow

on:
  workflow_call:
    inputs:
      REPO_NAME:
        required: true
        type: string
    secrets:
      DEV_DOCKER_PASSWORD:
        required: true
      STG_DOCKER_PASSWORD:
        required: true
      PRD_DOCKER_PASSWORD:
        required: true        
      APPLICATION_ID:
        required: true        
      APPLICATION_PRIVATE_KEY:
        required: true                        

# env:
#   GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  # run-tests:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node-version: [12.x]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         path: "**/node_modules"
  #         key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - name: Install Dependencies
  #       run: yarn install
  #       run: npm install -g jest
  #     - name: Run tests
  #       run: yarn test:jest

  env-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: deploys/argocd/**/${{ inputs.REPO_NAME }}.yaml
          config_file: deploys/argocd/.yamllint.yml

  check-duplicates-vars:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          for yaml in $(find deploys/argocd -name "*.yaml") 
          do 
              if [[ $(grep '\- name' $yaml|sort  | uniq -c | awk '$1 > 1 { print }') ]]
              then
              echo 'there are duplicate lines in ${yaml} file'; echo $(grep '\- name' $yaml|sort  | uniq -c | awk '$1 > 1 { print }')
              exit 1
              fi
          done
          
  build-push-image:
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:
      # - run-tests
      - env-lint
      - check-duplicates-vars

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          TAG=noop
          if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            TAG=$(echo ${GITHUB_REF#refs/*/} | grep -E -o 'v((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$')
            ENV=PRD
            PRJ=prj-mundi-prd
          elif [[ ${{ github.event.ref }} =~ .[0-9]rc$ ]]; then
            TAG=$(echo ${GITHUB_REF#refs/*/} | grep -E -o 'v((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)+rc$')
            ENV=STG
            PRJ=prj-mundi-stg
          elif [[ "${{ github.ref }}" =~ ^refs/heads/master$ ]]; then
            TAG=${GITHUB_SHA::7}
            ENV=DEV
            PRJ=prj-mundi-dev-330421
          fi
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=env::${ENV}
          echo ::set-output name=prj::${PRJ}

      - name: Build and push DEV Docker image
        if: steps.prep.outputs.env == 'DEV'
        uses: docker/build-push-action@v1
        with:
          dockerfile: Dockerfile
          username: _json_key
          password: ${{ secrets.DEV_DOCKER_PASSWORD }}
          registry: gcr.io
          repository: prj-mundi-dev-330421/${{ inputs.REPO_NAME }}
          tags: ${{ steps.prep.outputs.tag }}

      - name: Build and push rc STG Docker image
        if: steps.prep.outputs.env == 'STG'
        uses: docker/build-push-action@v1
        with:
          dockerfile: ./Dockerfile
          username: _json_key
          password: ${{ secrets.STG_DOCKER_PASSWORD }}
          registry: gcr.io
          repository: prj-mundi-stg/${{ inputs.REPO_NAME }}
          tags: ${{ steps.prep.outputs.tag }}

      - name: Build and push PRD Docker image
        if: steps.prep.outputs.env == 'PRD'
        uses: docker/build-push-action@v1
        with:
          dockerfile: ./Dockerfile
          username: _json_key
          password: ${{ secrets.PRD_DOCKER_PASSWORD }}
          registry: gcr.io
          repository: prj-mundi-prd/${{ inputs.REPO_NAME }}
          tags: ${{ steps.prep.outputs.tag }}


################################################################## CD ##################################################################
      - name: ENV lowercase
        id: string
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ steps.prep.outputs.env }}

      - name: Setup template for updated image to be deployed
        uses: cuchi/jinja2-action@v1.2.0
        id: deploy-file
        with:
          template: .github/templates/deployment-template.yaml.j2
          output_file: .argocd-source-${{ inputs.REPO_NAME }}-${{ steps.string.outputs.lowercase }}.yaml
          strict: true
          variables: |
            tag=${{ steps.prep.outputs.tag }}
            repository=gcr.io/${{ steps.prep.outputs.prj }}/${{ inputs.REPO_NAME }}

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APPLICATION_ID }}
          private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}

      - name: Push file
        id: push
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ steps.generate_token.outputs.token }}
        with:
          source_file: .argocd-source-${{ inputs.REPO_NAME }}-${{ steps.string.outputs.lowercase }}.yaml
          destination_repo: 'munditrade/microservices-chart'
          destination_branch: ${{ steps.string.outputs.lowercase }}
          user_email: '${{ github.event.repository.name }}@mundi.io'
          user_name: '${{ github.event.repository.name }}'
          commit_message: 'deployment from ${{ github.event.repository.name }}'

      - name: Retry on failure
        if: steps.push.outcome == 'failure'
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ steps.generate_token.outputs.token }}
        with:
          source_file: .argocd-source-${{ inputs.REPO_NAME }}-${{ steps.string.outputs.lowercase }}.yaml
          destination_repo: 'munditrade/microservices-chart'
          destination_branch: ${{ steps.string.outputs.lowercase }}
          user_email: '${{ github.event.repository.name }}@mundi.io'
          user_name: '${{ github.event.repository.name }}'
          commit_message: 'deployment from ${{ github.event.repository.name }}'