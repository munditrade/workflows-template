name: Reusable CI workflow

on:
  workflow_call:
    inputs:
      REPO_NAME:
        required: true
        type: string

jobs:
  run-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: yarn install
      - name: Run tests
        run: yarn test:jest

  env-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: deploys/argocd/**/${{ inputs.REPO_NAME }}.yaml
          config_file: deploys/argocd/.yamllint.yml

  check-duplicates-vars:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          for yaml in $(find deploys/argocd -name "*.yaml") 
          do 
              if [[ $(grep '\- name' $yaml|sort  | uniq -c | awk '$1 > 1 { print }') ]]
              then
              echo 'there are duplicate lines in ${yaml} file'; echo $(grep '\- name' $yaml|sort  | uniq -c | awk '$1 > 1 { print }')
              exit 1
              fi
          done
          
  build-push-image:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:
      - run-tests
      - env-lint
      - check-duplicates-vars

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          TAG=noop
          if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            TAG=$(echo ${GITHUB_REF#refs/*/} | grep -E -o 'v((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$')
            ENV=PRD
          elif [[ ${{ github.event.ref }} =~ .[0-9]rc$ ]]; then
            TAG=$(echo ${GITHUB_REF#refs/*/} | grep -E -o 'v((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)+rc$')
            ENV=STG
          elif [[ "${{ github.ref }}" =~ ^refs/heads/main$ ]]; then
            TAG=${GITHUB_SHA::7}
            ENV=DEV
          fi
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=env::${ENV}

      - name: Build and push DEV Docker image
        if: steps.prep.outputs.env == 'DEV'
        uses: docker/build-push-action@v1
        with:
          dockerfile: Dockerfile
          username: _json_key
          password: ${{ secrets.DEV_DOCKER_PASSWORD }}
          registry: gcr.io
          repository: prj-mundi-dev-330421/${{ inputs.REPO_NAME }}
          tags: ${{ steps.prep.outputs.tag }}
          

      - name: Build and push rc STG Docker image
        if: steps.prep.outputs.env == 'STG'
        uses: docker/build-push-action@v1
        with:
          dockerfile: ./Dockerfile
          username: _json_key
          password: ${{ secrets.STG_DOCKER_PASSWORD }}
          registry: gcr.io
          repository: prj-mundi-stg/${{ inputs.REPO_NAME }}
          tags: ${{ steps.prep.outputs.tag }}

      - name: Build and push PRD Docker image
        if: steps.prep.outputs.env == 'PRD'
        uses: docker/build-push-action@v1
        with:
          dockerfile: ./Dockerfile
          username: _json_key
          password: ${{ secrets.PRD_DOCKER_PASSWORD }}
          registry: gcr.io
          repository: prj-mundi-prd/${{ inputs.REPO_NAME }}
          tags: ${{ steps.prep.outputs.tag }}